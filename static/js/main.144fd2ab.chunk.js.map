{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","keyName","handleKeyUp","event","setState","key","window","addEventListener","this","_","nextState","removeEventListener","className","React","Component","ReactDOM","render","document","getElementById"],"mappings":"oNAMaA,EAAb,4MACEC,MAAe,CACbC,QAAS,IAFb,EAiBEC,YAAc,SAACC,GACb,EAAKC,SAAS,CAAEH,QAASE,EAAME,OAlBnC,uDAKE,WACEC,OAAOC,iBAAiB,QAASC,KAAKN,eAN1C,mCASE,SAAsBO,EAAiBC,GACrC,OAAOA,EAAUT,UAAYO,KAAKR,MAAMC,UAV5C,kCAaE,WACEK,OAAOK,oBAAoB,QAASH,KAAKN,eAd7C,oBAqBE,WACE,IAAQD,EAAYO,KAAKR,MAAjBC,QAER,OACE,qBAAKW,UAAU,MAAf,SACGX,EACC,mBAAGW,UAAU,eAAb,4CAC+BX,EAD/B,OAIA,mBAAGW,UAAU,eAAb,2CA/BV,GAAyBC,IAAMC,W,MCD/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.144fd2ab.chunk.js","sourcesContent":["import React from 'react';\n\ntype State = {\n  keyName: string,\n};\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    keyName: '',\n  };\n\n  componentDidMount(): void {\n    window.addEventListener('keyup', this.handleKeyUp);\n  }\n\n  shouldComponentUpdate(_: Readonly<{}>, nextState: Readonly<State>): boolean {\n    return nextState.keyName !== this.state.keyName;\n  }\n\n  componentWillUnmount(): void {\n    window.removeEventListener('keyup', this.handleKeyUp);\n  }\n\n  handleKeyUp = (event: KeyboardEvent) => {\n    this.setState({ keyName: event.key });\n  };\n\n  render() {\n    const { keyName } = this.state;\n\n    return (\n      <div className=\"App\">\n        {keyName ? (\n          <p className=\"App__message\">\n            {`The last pressed key is [${keyName}]`}\n          </p>\n        ) : (\n          <p className=\"App__message\">Nothing was pressed yet</p>\n        )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}